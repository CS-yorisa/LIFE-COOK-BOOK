# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "feat/docker-compose" ]
  pull_request:
    branches: [ "feat/docker-compose" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      # jdk setting
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      - name: Build with Gradle Wrapper
        run: |
          cd ./backend
          ./gradlew clean build -x test --stacktrace
        env:
          DB_ENDPOINT: ${{ secrets.DB_ENDPOINT }}
          DB_SCHEMA: ${{ secrets.DB_SCHEMA }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#          JWT_TOKEN: ${{ secrets.JWT_TOKEN }}

      - name: Create env file
        run: |
          echo DB_ENDPOINT=${{ secrets.DB_ENDPOINT }} >> .env
          echo DB_SCHEMA=${{ secrets.DB_SCHEMA }} >> .env
          echo DB_USERNAME=${{ secrets.DB_USERNAME }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
#          echo JWT_TOKEN=${{ secrets.JWT_TOKEN }} >> .env

      - name: Copy configuration & env files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: |
            ./docker-compose.yml
            ./frontend/nginx/nginx.conf
            ./github/workspace/.env
          target: /home/ec2-user/

      - name: Set Docker tag
        id: docker_tag
        run: echo "DOCKER_TAG=${GITHUB_REF_NAME}-${GITHUB_SHA::7}" >> $GITHUB_ENV

      # docker hub 로그인 후 image build & push
      - name: Docker SpringBoot build & push
        run: |
          docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
          cd ./backend
          docker build -f Dockerfile -t "${{ secrets.DOCKER_USERNAME }}/life-cook-book-server:${{ env.DOCKER_TAG }}" .
          docker push "${{ secrets.DOCKER_USERNAME }}/life-cook-book-server:${{ env.DOCKER_TAG }}"
      - name: Docker Nginx-React build & push
        run: |
          cd ./frontend
          docker build -f Dockerfile -t "${{ secrets.DOCKER_USERNAME }}/life-cook-book-client:${{ env.DOCKER_TAG }}" .
          docker push "${{ secrets.DOCKER_USERNAME }}/life-cook-book-client:${{ env.DOCKER_TAG }}"

      # AWS EC2 접속 후 배포
      - name: AWS EC2 Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
          username: ec2-user # 인스턴스를 시작하는 데 사용되는 AMI에 정의된 사용자 이름 (사용자 이름을 지정하지 않으면, 기본 사용자 이름인 ubuntu 사용)
          key: ${{ secrets.EC2_PRIVATE_KEY }} # key-pair 의 pemkey
          script: |
            sudo docker login -u "${{ secrets. DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            sudo docker stop spring
            sudo docker rm -f $(sudo docker ps --filter 'status=exited' -a -q)
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}"/life-cook-book-server:latest
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}"/life-cook-book-client:latest
            sudo docker-compose up -d
            sudo docker image prune -a -f
